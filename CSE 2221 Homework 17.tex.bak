
%	options include 12pt or 11pt or 10pt
%	classes include article, report, book, letter, thesis

\title{\Huge Brendan Whitaker}



\author{\huge CSE 2221 Homework 17 \linebreak \\\\ \Large Professor Bucci}

\date{5 April 2017}
\documentclass[10pt]{article}



\usepackage{amsmath,amsthm,amssymb}
\usepackage{listings}

%\usepackage[margin=1in]{geometry}&


\begin{document}
\maketitle


\paragraph{1. } We implement the removeMin method: 

\begin{lstlisting}
    /**
     * Removes and returns the minimum value from {@code q} 
     * according to the
     * ordering provided by the {@code compare} method 
     * from {@code order}.
     *
     * @param q
     *            the queue
     * @param order
     *            ordering by which to compare entries
     * @return the minimum value from {@code q}
     * @updates q
     * @requires <pre>
     * q /= empty_string  and
     *  [the relation computed by order.compare is a total 
     * preorder]
     * </pre>
     * @ensures <pre>
     * perms(q * <removeMin>, #q)  and
     *  for all x: string of character
     *      where (x is in entries (q))
     *    ([relation computed by order.compare method](removeMin, x))
     * </pre>
     */
    private static String removeMin(Queue<String> q, 
    Comparator<String> order) {
        int length = q.length();
        int distanceFromMin = 0;
        String s = q.front();
        for (int i = 0; i < length; i++) {
            q.rotate(1);
            distanceFromMin++;
            if (order.compare(s, q.front()) > 0) {
                s = q.front();
                distanceFromMin = 0;
            }
        }
        q.rotate(distanceFromMin);
        return q.dequeue();
    }
\end{lstlisting}

\paragraph{2. } We implement the sort method: 

\begin{lstlisting}
    /**
     * Sorts {@code q} according to the ordering 
     * provided by the {@code compare}
     * method from {@code order}.
     *
     * @param q
     *            the queue
     * @param order
     *            ordering by which to sort
     * @updates q
     * @requires [the relation computed by order.compare
     * is a total preorder]
     * @ensures q = [#q ordered by the relation computed
     * by order.compare]
     */
    public static void sort(Queue<String> q, 
    Comparator<String> order) {
        Queue<String> temp = new Queue2<String>();
        int length = q.length();
        for (int i = 0; i < length; i++) {
            temp.enqueue(removeMin(q, order));
        }
        q.transferFrom(temp);
    }
\end{lstlisting}












\end{document}